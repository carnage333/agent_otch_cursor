from rag_system import RAGSystem
from typing import Dict, List

def generate_rag_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ RAG —Å–∏—Å—Ç–µ–º–µ"""
    rag = RAGSystem()
    
    print("üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –û RAG –°–ò–°–¢–ï–ú–ï")
    print("=" * 80)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_terms = 0
    categories_stats = {}
    
    for category, items in rag.knowledge_base.items():
        categories_stats[category] = len(items)
        total_terms += len(items)
    
    print(f"üéØ –í–°–ï–ì–û –¢–ï–†–ú–ò–ù–û–í –í RAG –°–ò–°–¢–ï–ú–ï: {total_terms}")
    print("\nüìÅ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("-" * 40)
    
    for category, count in categories_stats.items():
        print(f"   {category}: {count} —Ç–µ—Ä–º–∏–Ω–æ–≤")
    
    print("\n" + "=" * 80)
    print("üìù –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –¢–ï–†–ú–ò–ù–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("=" * 80)
    
    for category, items in rag.knowledge_base.items():
        print(f"\nüîπ –ö–ê–¢–ï–ì–û–†–ò–Ø: {category.upper()} ({len(items)} —Ç–µ—Ä–º–∏–Ω–æ–≤)")
        print("-" * 50)
        
        for i, item in enumerate(items, 1):
            print(f"{i:2d}. {item.term}")
            print(f"    üìñ {item.definition}")
            if item.examples:
                print(f"    üí° –ü—Ä–∏–º–µ—Ä—ã: {', '.join(item.examples)}")
            if item.related_terms:
                print(f"    üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ: {', '.join(item.related_terms)}")
            print()
    
    print("=" * 80)
    print("‚úÖ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    
    print(f"üìö –í—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {total_terms}")
    print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories_stats)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìÑ –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–´–• –î–ê–ù–ù–´–•:")
    print("-" * 40)
    
    # –¢–µ—Ä–º–∏–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    file_terms = [
        "–ö–ò–ë", "–ú–ê–†–ö", "–ú–ö–ò–ë", "–ú–ú–ë", "–û–¢–†", "–°–ë–ë–û–õ", "–¢–ê–ö–ë", "–§–†–ö", "–ß–û–î",
        "AOV", "CAC", "CPI", "CPA", "BR", "Average page view duration"
    ]
    
    found_in_rag = 0
    missing_terms = []
    
    for term in file_terms:
        items = rag.search_knowledge(term)
        if items:
            found_in_rag += 1
        else:
            missing_terms.append(term)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ RAG: {found_in_rag}/{len(file_terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ RAG: {len(missing_terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
    
    if missing_terms:
        print(f"üìã –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(missing_terms)}")
    
    coverage_percentage = (found_in_rag / len(file_terms)) * 100
    print(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage_percentage:.1f}%")
    
    print("\n" + "=" * 80)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 80)
    
    if coverage_percentage >= 90:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ! RAG —Å–∏—Å—Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    elif coverage_percentage >= 70:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
    else:
        print("‚ùå –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã.")
    
    print(f"\nüí° RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ AI –∞–≥–µ–Ω—Ç–µ!")
    print(f"üí° –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.")
    print(f"üí° –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é.")

if __name__ == "__main__":
    generate_rag_report() 