#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö LLM –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
"""

import argparse
import os
import sys
from ai_agent import MarketingAnalyticsAgent

def test_ollama():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama"""
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama (–ª–æ–∫–∞–ª—å–Ω—ã–π LLM)")
    print("=" * 50)
    
    try:
        import ollama
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        try:
            models = ollama.list()
            print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–¥–µ–ª–∏: {[m['name'] for m in models['models']]}")
        except Exception as e:
            print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama: https://ollama.ai/")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = MarketingAnalyticsAgent()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        test_report = """# üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4

## üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- –ü–æ–∫–∞–∑—ã: 1,234,567
- –ö–ª–∏–∫–∏: 12,345
- CTR: 1.0%
- CPC: 45.67 ‚ÇΩ
- –†–∞—Å—Ö–æ–¥: 564,123 ‚ÇΩ"""

        enhanced_report = agent.enhance_report_with_ollama(
            test_report, 
            "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4"
        )
        
        print("üìù –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:")
        print("-" * 40)
        print(enhanced_report)
        print("-" * 40)
        
        return True
        
    except ImportError:
        print("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ollama")
        return False

def test_huggingface():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hugging Face"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hugging Face (–æ–Ω–ª–∞–π–Ω LLM)")
    print("=" * 50)
    
    try:
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        token = os.getenv('HUGGINGFACE_TOKEN')
        if not token:
            print("‚ùå HUGGINGFACE_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("   export HUGGINGFACE_TOKEN='hf_your-token-here'")
            return False
        
        print("‚úÖ Hugging Face —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = MarketingAnalyticsAgent()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        test_report = """# üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4

## üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- –ü–æ–∫–∞–∑—ã: 1,234,567
- –ö–ª–∏–∫–∏: 12,345
- CTR: 1.0%
- CPC: 45.67 ‚ÇΩ
- –†–∞—Å—Ö–æ–¥: 564,123 ‚ÇΩ"""

        enhanced_report = agent.enhance_report_with_huggingface(
            test_report, 
            "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4"
        )
        
        print("üìù –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:")
        print("-" * 40)
        print(enhanced_report)
        print("-" * 40)
        
        return True
        
    except ImportError:
        print("‚ùå requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests")
        return False

def test_local_templates():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = MarketingAnalyticsAgent()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    test_report = """# üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4

## üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- –ü–æ–∫–∞–∑—ã: 1,234,567
- –ö–ª–∏–∫–∏: 12,345
- CTR: 1.0%
- CPC: 45.67 ‚ÇΩ
- –†–∞—Å—Ö–æ–¥: 564,123 ‚ÇΩ"""

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data_summary = {
        "total_impressions": 1234567,
        "total_clicks": 12345,
        "total_cost": 564123,
        "avg_ctr": 1.0,
        "avg_cpc": 45.67
    }

    enhanced_report = agent.enhance_report_with_local_llm(
        test_report, 
        "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4",
        data_summary
    )
    
    print("üìù –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:")
    print("-" * 40)
    print(enhanced_report)
    print("-" * 40)
    
    return True

def test_all_free_llm():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö LLM"""
    print("üÜì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö LLM")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Ollama
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama...")
    results['ollama'] = test_ollama()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Hugging Face
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hugging Face...")
    results['huggingface'] = test_huggingface()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
    results['local'] = test_local_templates()
    
    # –ò—Ç–æ–≥–∏
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 40)
    
    for llm, success in results.items():
        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"{llm.upper():15} {status}")
    
    working_count = sum(results.values())
    total_count = len(results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {working_count}/{total_count} LLM —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if working_count > 0:
        print("‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ LLM!")
    else:
        print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π LLM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")

def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö LLM')
    parser.add_argument('--type', choices=['ollama', 'huggingface', 'local', 'all'], 
                       default='all', help='–¢–∏–ø LLM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö LLM")
    
    if args.type == 'ollama':
        test_ollama()
    elif args.type == 'huggingface':
        test_huggingface()
    elif args.type == 'local':
        test_local_templates()
    else:
        test_all_free_llm()

if __name__ == "__main__":
    main() 