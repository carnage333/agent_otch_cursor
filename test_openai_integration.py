#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI GPT
"""

import os
import sys
from ai_agent import MarketingAnalyticsAgent

def test_openai_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI GPT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        return False
    
    print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
    agent = MarketingAnalyticsAgent()
    
    if not agent.openai_available:
        print("‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∞–≥–µ–Ω—Ç–µ")
        return False
    
    print("‚úÖ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∞–≥–µ–Ω—Ç–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    test_report = """# üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4

## üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
- –ü–æ–∫–∞–∑—ã: 1,234,567
- –ö–ª–∏–∫–∏: 12,345
- CTR: 1.0%
- CPC: 45.67 ‚ÇΩ
- –†–∞—Å—Ö–æ–¥: 564,123 ‚ÇΩ

## üìã –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ö–∞–º–ø–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""

    enhanced_report = agent.enhance_report_with_openai(
        test_report, 
        "–ü–æ–∫–∞–∂–∏ –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –§–†–ö4"
    )
    
    print("üìù –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:")
    print("-" * 40)
    print(enhanced_report)
    print("-" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Å–∞–π—Ç–æ–≤
    print("\nüí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤...")
    
    import pandas as pd
    test_data = pd.DataFrame({
        'campaign_name': ['–§–†–ö4_–ë–∏–∑–Ω–µ—Å', '–§–†–ö4_–†–ö–û'],
        'impressions': [1000000, 500000],
        'clicks': [10000, 3000],
        'cost': [400000, 120000],
        'ctr': [1.0, 0.6],
        'cpc': [40.0, 40.0]
    })
    
    insights = agent.generate_insights_with_openai(
        test_data, 
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–π"
    )
    
    print("üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã:")
    for insight in insights:
        print(f"  {insight}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    recommendations = agent.generate_recommendations_with_openai(
        test_data, 
        "–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
    )
    
    print("üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in recommendations:
        print(f"  {rec}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_fallback_to_rag():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –Ω–∞ RAG —Å–∏—Å—Ç–µ–º—É"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –Ω–∞ RAG —Å–∏—Å—Ç–µ–º—É")
    print("=" * 50)
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º API –∫–ª—é—á
    original_key = os.getenv('OPENAI_API_KEY')
    os.environ.pop('OPENAI_API_KEY', None)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = MarketingAnalyticsAgent()
    
    if agent.rag_system is not None:
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∫ fallback")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG
        test_report = "–û—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏"
        enhanced = agent.rag_system.enhance_report(test_report, "–ß—Ç–æ —Ç–∞–∫–æ–µ CTR?")
        
        if enhanced != test_report:
            print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —É–ª—É—á—à–∏–ª–∞ –æ—Ç—á–µ—Ç")
    else:
        print("‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
    if original_key:
        os.environ['OPENAI_API_KEY'] = original_key

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = test_openai_integration()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback
    test_fallback_to_rag()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å OpenAI GPT")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API") 