import streamlit as st
import sqlite3
import os

st.title("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
st.header("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")
try:
    files = os.listdir('.')
    st.write("–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    for file in sorted(files):
        if file.endswith('.py') or file.endswith('.db'):
            st.write(f"  - {file}")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
st.header("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
try:
    if os.path.exists('marketing_analytics.db'):
        st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
        size = os.path.getsize('marketing_analytics.db')
        st.write(f"–†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç")
        
        conn = sqlite3.connect('marketing_analytics.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        st.write(f"–¢–∞–±–ª–∏—Ü—ã: {[t[0] for t in tables]}")
        
        if ('campaign_metrics',) in tables:
            st.success("‚úÖ –¢–∞–±–ª–∏—Ü–∞ campaign_metrics –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute("PRAGMA table_info(campaign_metrics)")
            columns = cursor.fetchall()
            st.write("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
            for col in columns:
                st.write(f"  - {col[1]} ({col[2]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM campaign_metrics")
            count = cursor.fetchone()[0]
            st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                cursor.execute("SELECT DISTINCT \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\" FROM campaign_metrics LIMIT 3")
                campaigns = cursor.fetchall()
                st.write("–ü—Ä–∏–º–µ—Ä—ã –∫–∞–º–ø–∞–Ω–∏–π:")
                for campaign in campaigns:
                    st.write(f"  - {campaign[0]}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        else:
            st.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ campaign_metrics –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        conn.close()
    else:
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    import traceback
    st.code(traceback.format_exc())

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞
st.header("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞")
try:
    with open('ai_agent.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
        if len(lines) >= 320:
            line_320 = lines[319].strip()  # 0-based indexing
            st.write(f"–°—Ç—Ä–æ–∫–∞ 320: {line_320}")
            if "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏" in line_320:
                st.success("‚úÖ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                st.error("‚ùå –ö–æ–¥ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            st.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
st.write("""
1. –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
2. –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
3. –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
""") 