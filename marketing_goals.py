"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
"""

import json
from datetime import datetime, date
from typing import Dict, List, Optional, Tuple
import pandas as pd

class MarketingGoals:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self):
        # –¶–µ–ª–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        self.goals = {
            "conversion_to_deal": {
                "2025-09-30": {
                    "plan": 0.45,
                    "fact": 0.0,
                    "description": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Å–¥–µ–ª–∫—É –¥–æ 30.09.2025"
                },
                "2025-12-31": {
                    "plan": 0.45,
                    "fact": 0.0,
                    "description": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Å–¥–µ–ª–∫—É –¥–æ 31.12.2025"
                }
            },
            "mroi": {
                "2025-12-31": {
                    "plan": 150.0,
                    "fact": 0.0,
                    "description": "Marketing Return On Investment (MROI) –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é digital –¥–æ 31.12.2025"
                }
            }
        }
        
        # –§–æ—Ä–º—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self.metrics_formulas = {
            "ctr": {
                "formula": "clicks / impressions * 100",
                "description": "Click-Through Rate (CTR) - –ø—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–∫–æ–≤ –æ—Ç –ø–æ–∫–∞–∑–æ–≤"
            },
            "cpc": {
                "formula": "cost / clicks",
                "description": "Cost Per Click (CPC) - —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–ª–∏–∫"
            },
            "cpm": {
                "formula": "cost / impressions * 1000",
                "description": "Cost Per Mille (CPM) - —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1000 –ø–æ–∫–∞–∑–æ–≤"
            },
            "conversion_rate": {
                "formula": "visits / clicks * 100",
                "description": "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –∫–ª–∏–∫–æ–≤ –≤ –ø–æ—Å–µ—â–µ–Ω–∏—è"
            },
            "roas": {
                "formula": "revenue / cost * 100",
                "description": "Return on Ad Spend (ROAS) - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"
            },
            "mroi": {
                "formula": "(revenue - cost) / cost * 100",
                "description": "Marketing Return on Investment (MROI) - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π ROI"
            }
        }
    
    def calculate_metrics(self, df: pd.DataFrame) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞"""
        metrics = {}
        
        if df.empty:
            return metrics
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_impressions = df['impressions'].sum()
        total_clicks = df['clicks'].sum()
        total_cost = df['cost'].sum()
        total_visits = df['visits'].sum()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if total_impressions > 0 and total_clicks > 0:
            metrics['ctr'] = round((total_clicks / total_impressions) * 100, 2)
        
        if total_clicks > 0 and total_cost > 0:
            metrics['cpc'] = round(total_cost / total_clicks, 2)
        
        if total_impressions > 0 and total_cost > 0:
            metrics['cpm'] = round((total_cost / total_impressions) * 1000, 2)
        
        if total_clicks > 0 and total_visits > 0:
            metrics['conversion_rate'] = round((total_visits / total_clicks) * 100, 2)
        
        # –î–ª—è ROAS –∏ MROI –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ä—É—á–∫–µ
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–∞–∑–µ
        
        return metrics
    
    def get_goals_for_period(self, period: str = "2025-12-31") -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        goals_for_period = {}
        
        for metric_type, periods in self.goals.items():
            if period in periods:
                goals_for_period[metric_type] = periods[period]
        
        return goals_for_period
    
    def compare_with_goals(self, metrics: Dict[str, float], period: str = "2025-12-31") -> Dict[str, Dict]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å —Ü–µ–ª—è–º–∏"""
        goals = self.get_goals_for_period(period)
        comparison = {}
        
        for metric_name, metric_value in metrics.items():
            if metric_name in goals:
                goal = goals[metric_name]
                comparison[metric_name] = {
                    "fact": metric_value,
                    "plan": goal["plan"],
                    "achievement": round((metric_value / goal["plan"]) * 100, 2) if goal["plan"] > 0 else 0,
                    "description": goal["description"],
                    "status": "achieved" if metric_value >= goal["plan"] else "not_achieved"
                }
        
        return comparison
    
    def format_metrics_report(self, metrics: Dict[str, float], comparison: Dict[str, Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Å —Ü–µ–ª—è–º–∏"""
        report = "## üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        report += "### üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n"
        for metric_name, value in metrics.items():
            if metric_name in self.metrics_formulas:
                description = self.metrics_formulas[metric_name]["description"]
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ—Ç—Ä–∏–∫–∏
                if metric_name in ['ctr', 'conversion_rate']:
                    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    report += f"- **{metric_name.upper()}**: {value}% - {description}\n"
                elif metric_name in ['cpc', 'cpm']:
                    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
                    report += f"- **{metric_name.upper()}**: {value} ‚ÇΩ - {description}\n"
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    report += f"- **{metric_name.upper()}**: {value} - {description}\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏
        if comparison:
            report += "\n### üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏\n\n"
            for metric_name, comp_data in comparison.items():
                status_emoji = "‚úÖ" if comp_data["status"] == "achieved" else "‚ö†Ô∏è"
                report += f"{status_emoji} **{metric_name.upper()}**\n"
                report += f"   - –ü–ª–∞–Ω: {comp_data['plan']}%\n"
                report += f"   - –§–∞–∫—Ç: {comp_data['fact']}%\n"
                report += f"   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {comp_data['achievement']}%\n"
                report += f"   - {comp_data['description']}\n\n"
        
        return report
    
    def get_metrics_description(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        description = "## üìà –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n\n"
        
        for metric_name, info in self.metrics_formulas.items():
            description += f"### {metric_name.upper()}\n"
            description += f"{info['description']}\n"
            description += f"–§–æ—Ä–º—É–ª–∞: `{info['formula']}`\n\n"
        
        return description

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
marketing_goals = MarketingGoals() 