import streamlit as st
import sqlite3
import pandas as pd
import json
from typing import Dict, List, Optional, Tuple
import re

# –ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –±–µ–∑ rapidfuzz
class SimpleMarketingAgent:
    def __init__(self, db_path: str = 'marketing_analytics.db'):
        self.db_path = db_path
    
    def _extract_search_terms(self, question: str) -> list:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        question_upper = question.upper()
        keywords = []
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for kw in ["–ü–û –ö–ê–ú–ü–ê–ù–ò–ò", "–ö–ê–ú–ü–ê–ù–ò–Ø", "–û–¢–ß–ï–¢ –ü–û", "–û–¢–ß–Å–¢ –ü–û", "–°–î–ï–õ–ê–ô –û–¢–ß–ï–¢ –ü–û"]:
            if kw in question_upper:
                part = question_upper.split(kw, 1)[-1].strip()
                for w in ["–ü–û–ö–ê–ñ–ò", "–û–¢–ß–ï–¢", "–û–¢–ß–Å–¢", "–ê–ù–ê–õ–ò–ó", "–°–¢–ê–¢–ò–°–¢–ò–ö–ê"]:
                    part = part.replace(w, "").strip()
                keywords = [w for w in re.split(r"[\s,()]+", part) if w and len(w) > 1]
                break
        
        if not keywords:
            keywords = [w for w in re.split(r"[\s,()]+", question_upper) if len(w) > 2]
        
        return keywords
    
    def generate_sql_query(self, user_question: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞"""
        question_lower = user_question.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        is_general_stats = any(word in question_lower for word in [
            "–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "–≤—Å–µ–≥–æ", "–∏—Ç–æ–≥–æ", 
            "–æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥", "–æ–±—â–∏–µ –ø–æ–∫–∞–∑—ã", "–æ–±—â–∏–µ –∫–ª–∏–∫–∏", "–ø–æ–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        ])
        
        if is_general_stats:
            select_fields = [
                "COUNT(DISTINCT campaign_id) as campaigns_count",
                "SUM(impressions) as total_impressions", 
                "SUM(clicks) as total_clicks",
                "SUM(cost_before_vat) as total_cost",
                "SUM(visits) as total_visits",
                "ROUND(SUM(clicks) * 100.0 / SUM(impressions), 2) as avg_ctr",
                "ROUND(SUM(cost_before_vat) / SUM(clicks), 2) as avg_cpc"
            ]
        else:
            select_fields = [
                "campaign_name",
                "platform", 
                "SUM(impressions) as impressions",
                "SUM(clicks) as clicks",
                "SUM(cost_before_vat) as cost",
                "SUM(visits) as visits",
                "ROUND(SUM(clicks) * 100.0 / SUM(impressions), 2) as ctr",
                "ROUND(SUM(cost_before_vat) / SUM(clicks), 2) as cpc"
            ]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        search_terms = self._extract_search_terms(user_question)
        
        # –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        where_conditions = []
        if search_terms:
            for term in search_terms:
                where_conditions.append(f"UPPER(campaign_name) LIKE '%{term}%'")
        
        # –°–æ–±–∏—Ä–∞–µ–º SQL
        sql = f"SELECT {', '.join(select_fields)} FROM campaign_metrics"
        if where_conditions:
            sql += f" WHERE {' AND '.join(where_conditions)}"
        sql += " GROUP BY campaign_name, platform ORDER BY campaign_name ASC"
        
        return sql
    
    def execute_query(self, sql_query: str) -> pd.DataFrame:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            df = pd.read_sql_query(sql_query, conn)
            conn.close()
            return df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return pd.DataFrame()
    
    def generate_report(self, df: pd.DataFrame, question: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        if df.empty:
            return "## –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
        
        report = f"# –û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {question}\n\n"
        
        if "total_impressions" in df.columns:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            row = df.iloc[0]
            report += "## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            report += f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π:** {row.get('campaigns_count', '‚Äî')}\n"
            report += f"- **–û–±—â–∏–µ –ø–æ–∫–∞–∑—ã:** {row.get('total_impressions', '‚Äî')}\n"
            report += f"- **–û–±—â–∏–µ –∫–ª–∏–∫–∏:** {row.get('total_clicks', '‚Äî')}\n"
            report += f"- **–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:** {row.get('total_cost', '‚Äî')} ‚ÇΩ\n"
            report += f"- **–°—Ä–µ–¥–Ω–∏–π CTR:** {row.get('avg_ctr', '‚Äî')}%\n"
            report += f"- **–°—Ä–µ–¥–Ω–∏–π CPC:** {row.get('avg_cpc', '‚Äî')} ‚ÇΩ\n\n"
        else:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += "## –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            for _, row in df.iterrows():
                report += f"### {row.get('campaign_name', '‚Äî')}\n"
                report += f"- –ü–ª–æ—â–∞–¥–∫–∞: {row.get('platform', '‚Äî')}\n"
                report += f"- –ü–æ–∫–∞–∑—ã: {row.get('impressions', '‚Äî')}\n"
                report += f"- –ö–ª–∏–∫–∏: {row.get('clicks', '‚Äî')}\n"
                report += f"- –†–∞—Å—Ö–æ–¥: {row.get('cost', '‚Äî')} ‚ÇΩ\n"
                report += f"- CTR: {row.get('ctr', '‚Äî')}%\n"
                report += f"- CPC: {row.get('cpc', '‚Äî')} ‚ÇΩ\n\n"
        
        return report

# Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
st.set_page_config(page_title="AI –ê–≥–µ–Ω—Ç –û—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏", layout="wide")

st.title("ü§ñ AI –ê–≥–µ–Ω—Ç –û—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –†–µ–∫–ª–∞–º–Ω—ã–º –ö–∞–º–ø–∞–Ω–∏—è–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
@st.cache_resource
def get_agent():
    return SimpleMarketingAgent()

agent = get_agent()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üí¨ –î–∏–∞–ª–æ–≥ —Å AI-–∞–≥–µ–Ω—Ç–æ–º")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    user_question = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç –ø–æ —Ñ—Ä–∫4, –ø–æ–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º...",
        height=100
    )
    
    if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç", type="primary"):
        if user_question.strip():
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç..."):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL
                sql_query = agent.generate_sql_query(user_question)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                df = agent.execute_query(sql_query)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = agent.generate_report(df, user_question)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                st.session_state.sql_query = sql_query
                st.session_state.report = report
                st.session_state.data = df

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
if 'report' in st.session_state:
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
    
    # SQL –∑–∞–ø—Ä–æ—Å
    with st.expander("üîç SQL –∑–∞–ø—Ä–æ—Å, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç–æ–º:", expanded=True):
        st.code(st.session_state.sql_query, language="sql")
        st.caption("–≠—Ç–æ—Ç SQL –∑–∞–ø—Ä–æ—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—Ç—á–µ—Ç
    st.markdown(st.session_state.report)

# –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
with st.expander("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"):
    st.markdown("""
    **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
    - –ø–æ–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    
    **–ü–æ –∫–∞–º–ø–∞–Ω–∏—è–º:**
    - —Å–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç –ø–æ —Ñ—Ä–∫4
    - –∞–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ –≥–æ–¥–æ–≤–æ–π performance
    - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –§–†–ö-4
    
    **–ü–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:**
    - –æ—Ç—á–µ—Ç –ø–æ —Ä–∫–æ
    - –∞–Ω–∞–ª–∏–∑ –ø–æ –±–∏–∑–Ω–µ—Å-–∫–∞—Ä—Ç—ã
    - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–±–∏–¥–æ—Å
    
    **–ü–æ –ø–ª–æ—â–∞–¥–∫–∞–º:**
    - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–æ—â–∞–¥–æ–∫
    - –∞–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    
    **–¢–æ–ø –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏:**
    - —Ç–æ–ø –∫–∞–º–ø–∞–Ω–∏–π
    - –ª—É—á—à–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ ctr
    """)

st.markdown("---")
st.caption("AI –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.") 