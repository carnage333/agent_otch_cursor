import streamlit as st
import pandas as pd
from ai_agent import MarketingAnalyticsAgent
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
st.set_page_config(
    page_title="AI-–∞–≥–µ–Ω—Ç –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ | –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ UI
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .chat-container {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid #e9ecef;
    }
    
    .sidebar-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin-bottom: 1rem;
    }
    
    .example-question {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 0.75rem;
        margin: 0.5rem 0;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .example-question:hover {
        background: #e9ecef;
        transform: translateX(5px);
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.2s;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
    
    .success-message {
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .info-message {
        background: linear-gradient(90deg, #17a2b8 0%, #6f42c1 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .warning-message {
        background: linear-gradient(90deg, #ffc107 0%, #fd7e14 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-out;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ */
    .plotly-chart {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    }
    
    /* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */
    .metric-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #667eea;
    }
    
    .metric-label {
        color: #6c757d;
        font-size: 0.9rem;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    .stChatInput {
        margin: 2rem auto;
        width: 100%;
        max-width: 800px;
    }
    
    .stChatInput > div {
        background: white;
        border-radius: 25px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    
    .stChatInput > div:focus-within {
        border-color: #667eea;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.2);
        transform: translateY(-2px);
    }
    
    .stChatInput input {
        border: none !important;
        background: transparent !important;
        padding: 15px 20px !important;
        font-size: 16px !important;
    }
    
    .stChatInput input:focus {
        outline: none !important;
        box-shadow: none !important;
    }
    
    /* –û—Ç—Å—Ç—É–ø –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª—Å—è –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ */
    .main-content {
        padding-bottom: 100px;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import init_db
init_db.init_database()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
@st.cache_resource
def get_agent():
    try:
        return MarketingAnalyticsAgent()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return None

agent = get_agent()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
if agent is None:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    st.stop()



# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
st.markdown("""
<div class="main-header fade-in">
    <h1>–ü—Ä–æ—Ç–æ—Ç–∏–ø AI-–ê–≥–µ–Ω—Ç–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –≤ Cursor</h1>
    <p style="margin: 0; opacity: 0.9;">AI-–∞–≥–µ–Ω—Ç –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º</p>
</div>
""", unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º
st.markdown('<div class="main-content">', unsafe_allow_html=True)

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "pending_campaign_select" not in st.session_state:
    st.session_state.pending_campaign_select = None
if "pending_user_question" not in st.session_state:
    st.session_state.pending_user_question = None
    
# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
chat_container = st.container()
with chat_container:
    for i, message in enumerate(st.session_state.chat_history):
        if message["role"] == "user":
            with st.chat_message("user"):
                st.write(message["content"])
        else:
            with st.chat_message("assistant"):
                st.markdown(message["content"])
                
                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel
                if "excel_data" in message and message["excel_data"] and len(message["excel_data"]) > 0:
                    st.download_button(
                        label="üìä –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç",
                        data=message["excel_data"],
                        file_name=f"–æ—Ç—á–µ—Ç_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                elif "excel_data" in message and (not message["excel_data"] or len(message["excel_data"]) == 0):
                    st.info("üìä Excel –æ—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl)")
                
                if "sql_query" in message and message["sql_query"]:
                    with st.expander("üîç –ü–æ–∫–∞–∑–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å", expanded=False):
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        sql_query = message["sql_query"]
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        formatted_sql = sql_query.replace("SELECT", "\nSELECT")
                        formatted_sql = formatted_sql.replace("FROM", "\nFROM")
                        formatted_sql = formatted_sql.replace("WHERE", "\nWHERE")
                        formatted_sql = formatted_sql.replace("GROUP BY", "\nGROUP BY")
                        formatted_sql = formatted_sql.replace("ORDER BY", "\nORDER BY")
                        formatted_sql = formatted_sql.replace("SUM(", "\n  SUM(")
                        formatted_sql = formatted_sql.replace("ROUND(", "\n  ROUND(")
                        
                        st.code(formatted_sql, language="sql")
                        st.markdown("*–≠—Ç–æ—Ç SQL –∑–∞–ø—Ä–æ—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö*")
    
# –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –∫–∞–º–ø–∞–Ω–∏–∏
if st.session_state.pending_campaign_select:
    st.markdown("""
    <div class="info-message">
        <h4>üéØ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–º–ø–∞–Ω–∏–π</h4>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏' –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.</p>
    </div>
    """, unsafe_allow_html=True)
    
    campaign_options = ["–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏"] + st.session_state.pending_campaign_select
    selected_campaign = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é:", campaign_options, key=f"select_{st.session_state.pending_user_question}")
    
    col1, col2 = st.columns([1, 2])
    with col1:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç", key=f"show_report_{st.session_state.pending_user_question}"):
            if selected_campaign == "–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏":
                # –î–ª—è "–í—Å–µ –∫–∞–º–ø–∞–Ω–∏–π" —Ñ–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
                campaign_conditions = " OR ".join([f"\"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\" = '{campaign}'" for campaign in st.session_state.pending_campaign_select])
                sql_query = f"""
                SELECT 
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏" as campaign_name,
                    "–ü–ª–æ—â–∞–¥–∫–∞" as platform,
                    SUM("–ü–æ–∫–∞–∑—ã") as impressions,
                    SUM("–ö–ª–∏–∫–∏") as clicks,
                    SUM("–†–∞—Å—Ö–æ–¥ –¥–æ –ù–î–°") as cost,
                    SUM("–í–∏–∑–∏—Ç—ã") as visits,
                    ROUND(SUM("–ö–ª–∏–∫–∏") * 100.0 / SUM("–ü–æ–∫–∞–∑—ã"), 2) as ctr,
                    ROUND(SUM("–†–∞—Å—Ö–æ–¥ –¥–æ –ù–î–°") / SUM("–ö–ª–∏–∫–∏"), 2) as cpc
                FROM campaign_metrics 
                WHERE {campaign_conditions}
                GROUP BY "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏", "–ü–ª–æ—â–∞–¥–∫–∞"
                ORDER BY "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏" ASC
                """
                if agent:
                    df = agent.execute_query(sql_query)
                    analysis = agent.analyze_data(df, str(st.session_state.pending_user_question))
                    response = agent.generate_report(analysis, str(st.session_state.pending_user_question), sql_query)
                    try:
                        excel_data = agent.generate_excel_report(analysis, str(st.session_state.pending_user_question))
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel: {e}")
                        excel_data = None
                    # SQL –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                else:
                    response = "‚ùå –û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    sql_query = ""
                    excel_data = None
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                sql_query = f"SELECT \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\" as campaign_name, \"–ü–ª–æ—â–∞–¥–∫–∞\" as platform, SUM(\"–ü–æ–∫–∞–∑—ã\") as impressions, SUM(\"–ö–ª–∏–∫–∏\") as clicks, SUM(\"–†–∞—Å—Ö–æ–¥ –¥–æ –ù–î–°\") as cost, SUM(\"–í–∏–∑–∏—Ç—ã\") as visits, ROUND(SUM(\"–ö–ª–∏–∫–∏\") * 100.0 / SUM(\"–ü–æ–∫–∞–∑—ã\"), 2) as ctr, ROUND(SUM(\"–†–∞—Å—Ö–æ–¥ –¥–æ –ù–î–°\") / SUM(\"–ö–ª–∏–∫–∏\"), 2) as cpc FROM campaign_metrics WHERE \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\" = '{selected_campaign}' GROUP BY \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\", \"–ü–ª–æ—â–∞–¥–∫–∞\" ORDER BY \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏\" ASC"
                if agent:
                    df = agent.execute_query(sql_query)
                    analysis = agent.analyze_data(df, f"–°–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {selected_campaign}")
                    response = agent.generate_report(analysis, f"–°–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {selected_campaign}", sql_query)
                    try:
                        excel_data = agent.generate_excel_report(analysis, f"–°–¥–µ–ª–∞–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {selected_campaign}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel: {e}")
                        excel_data = None
                    # SQL –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                else:
                    response = "‚ùå –û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    sql_query = ""
                    excel_data = None
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": response,
                "sql_query": sql_query,
                "excel_data": excel_data
            })
            st.session_state.pending_campaign_select = None
            st.session_state.pending_user_question = None
            st.rerun()
    
    with col2:
        if st.button("üîÑ –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_{st.session_state.pending_user_question}"):
            st.session_state.pending_campaign_select = None
            st.session_state.pending_user_question = None
            st.rerun()

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
if st.session_state.chat_history:
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 1, 1])
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞", key="clear_history"):
            st.session_state.chat_history = []
            st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
            st.rerun()

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
user_question = st.chat_input("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É...")

st.markdown('</div>', unsafe_allow_html=True)

# –°–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
if user_question and st.session_state.pending_campaign_select:
    st.session_state.pending_campaign_select = None
    st.session_state.pending_user_question = None

# --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏ ---
if user_question and not st.session_state.pending_campaign_select:
    if agent:
        matching_campaigns = agent.get_matching_campaigns(user_question)
        if len(matching_campaigns) > 1:
            st.session_state.pending_campaign_select = matching_campaigns
            st.session_state.pending_user_question = user_question
            st.session_state.chat_history.append({"role": "user", "content": user_question})
            st.rerun()
        elif len(matching_campaigns) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞–º–ø–∞–Ω–∏—è, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
            st.session_state.chat_history.append({"role": "user", "content": user_question})
            with st.spinner("ü§ñ –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ..."):
                response, sql_query, excel_data = agent.process_question(user_question)
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": response,
                "sql_query": sql_query,
                "excel_data": excel_data
            })
            st.rerun()
        else:
            # –ï—Å–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            st.session_state.chat_history.append({"role": "user", "content": user_question})
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞.",
                "sql_query": ""
            })
            st.rerun()
    else:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.") 