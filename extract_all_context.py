import docx
import re
from typing import List, Dict

def extract_all_from_docx(file_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        doc = docx.Document(file_path)
        full_text = ""
        
        print("üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞...")
        
        for paragraph in doc.paragraphs:
            text = paragraph.text.strip()
            if text:
                full_text += text + "\n"
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return full_text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return ""

def extract_all_terms(text: str) -> List[Dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï —Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    terms = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = text.split('\n')
    
    print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π...")
    
    for line in lines:
        line = line.strip()
        if not line or len(line) < 5:
            continue
        
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = [
            # –¢–ï–†–ú–ò–ù: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            r'^([–ê-–Ø][–ê-–Ø\s\d]+):\s*(.+)',
            # –¢–ï–†–ú–ò–ù - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ  
            r'^([–ê-–Ø][–ê-–Ø\s\d]+)\s*-\s*(.+)',
            # –¢–ï–†–ú–ò–ù = –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            r'^([–ê-–Ø][–ê-–Ø\s\d]+)\s*=\s*(.+)',
            # –¢–ï–†–ú–ò–ù (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            r'^([–ê-–Ø][–ê-–Ø\s\d]+)\s*\((.+)\)',
            # –¢–ï–†–ú–ò–ù. –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            r'^([–ê-–Ø][–ê-–Ø\s\d]+)\.\s*(.+)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, line)
            if match:
                term = match.group(1).strip()
                definition = match.group(2).strip()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
                if (len(term) > 2 and len(definition) > 10 and 
                    not term.isdigit() and not definition.isdigit()):
                    
                    terms.append({
                        'term': term,
                        'definition': definition,
                        'line': line
                    })
                    break
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
    return terms

def show_all_extracted_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    text = extract_all_from_docx("–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.docx")
    
    if not text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
        return
    
    print("\n" + "=" * 80)
    print("üìÑ –ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –ò–ó –§–ê–ô–õ–ê:")
    print("=" * 80)
    print(text[:2000] + "..." if len(text) > 2000 else text)
    
    terms = extract_all_terms(text)
    
    print("\n" + "=" * 80)
    print("üîç –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –¢–ï–†–ú–ò–ù–´:")
    print("=" * 80)
    
    for i, term in enumerate(terms, 1):
        print(f"{i:2d}. {term['term']}")
        print(f"    {term['definition']}")
        print(f"    üìù –°—Ç—Ä–æ–∫–∞: {term['line']}")
        print()
    
    print(f"\nüìä –ò–¢–û–ì–û: {len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞")
    
    return terms

if __name__ == "__main__":
    show_all_extracted_data() 